K_gain  <- Vypre/V_dy
#--------------
# filtering
#--------------
x_fil <- K_fil(x_now, dy, K_gain, V_v)
Vxpre_fil<- (1- K_gain )*Vypre
#--------------
# save result
#--------------
res <- tibble(x_now, y_pred, y, x_fil, K_gain, Vxpre, Vxpre_fil, Vypre,V_dy)
return(res)
}
# predictions and filtering
do_fitting <- function(y, x0, Vx0, Vwv){
# 出力先確保
Vxpre_fil <- vector(mode = "double", length = length(y))
x_fil     <- vector(mode = "double", length = length(y))
y_pred    <- vector(mode = "double", length = length(y))
x_now     <- vector(mode = "double", length = length(y))
# 初期値
x_pre <- x0;Vxpre <- Vx0;res <- tibble()
for (i in seq_along(y)) {
#--------------
# prediction and filtering
#--------------
res_tmp <- ssm(y[i], x_pre, Vxpre, Vwv[1],Vwv[2])
res <- bind_rows(res, res_tmp)
#--------------
# 入力値の更新
#--------------
x_pre <- res$x_fil[i]
Vxpre <- res$Vxpre_fil[i]
}
#--------------
# 尤度計算
#--------------
obj_value <-
res %>%
mutate(log_lklhd = log(V_dy) + (y-y_pred)^2/V_dy ) %>%
summarise(obj_value=1/2*sum(log_lklhd)) %>% .$obj_value
res <- list(res, "obj_value"=obj_value)
return(res)
}
#-------------------------------------
# MAIN 処理
#-------------------------------------
# Nile river
y     <- Nile
setwd("~/Desktop/状態空間モデル/")
df <- read_csv("./UKdriversKSI.txt") %>%
mutate(yyyy=seq(as.Date("1969-01-01"), as.Date("1984-12-01"), by = "month"))
colnames(df)[1] <- ("cnt")
y <- df$cnt
# 最適化
opt_res <-
optim(  function(Vwv){do_fitting(y, 0, 10**7, Vwv)[["obj_value"]]}
, par=c(1000,1000)
, method = "L-BFGS-B"
, lower=c(1,1)
)
res <- do_fitting(y, 0, 10**7, opt_res$par)
year=start(y)[1]:end(y)[1]
ggplot()+
geom_line(data=res[[1]],aes(x=year, y=y))+
geom_line(data=res[[1]],aes(x=year, y=x_fil), colour="red")+
geom_ribbon(  data=res[[1]]
, aes( x    = year
,ymin = x_fil-1.97*sqrt(Vxpre_fil)
,ymax = x_fil+1.97*sqrt(Vxpre_fil))
,alpha=0.2)
#-------------------------------------
# MAIN 処理
#-------------------------------------
# Nile river
y     <- Nile
# 最適化
opt_res <-
optim(  function(Vwv){do_fitting(y, 0, 10**7, Vwv)[["obj_value"]]}
, par=c(1000,1000)
, method = "L-BFGS-B"
, lower=c(1,1)
)
res <- do_fitting(y, 0, 10**7, opt_res$par)
year=start(y)[1]:end(y)[1]
ggplot()+
geom_line(data=res[[1]],aes(x=year, y=y))+
geom_line(data=res[[1]],aes(x=year, y=x_fil), colour="red")+
geom_ribbon(  data=res[[1]]
, aes( x    = year
,ymin = x_fil-1.97*sqrt(Vxpre_fil)
,ymax = x_fil+1.97*sqrt(Vxpre_fil))
,alpha=0.2)
y <- log(df$cnt)
# 最適化
opt_res <-
optim(  function(Vwv){do_fitting(y, 0, 10**7, Vwv)[["obj_value"]]}
, par=c(1000,1000)
, method = "L-BFGS-B"
, lower=c(1,1)
)
res <- do_fitting(y, 0, 10**7, opt_res$par)
year=start(y)[1]:end(y)[1]
ggplot()+
geom_line(data=res[[1]],aes(x=year, y=y))+
geom_line(data=res[[1]],aes(x=year, y=x_fil), colour="red")+
geom_ribbon(  data=res[[1]]
, aes( x    = year
,ymin = x_fil-1.97*sqrt(Vxpre_fil)
,ymax = x_fil+1.97*sqrt(Vxpre_fil))
,alpha=0.2)
ggplot()+
geom_line(data=res[[1]],aes(x=year, y=y))+
geom_line(data=res[[1]],aes(x=year, y=x_fil), colour="red")+
ggplot()+
geom_line(data=res[[1]],aes(x=year, y=y))+
geom_line(data=res[[1]],aes(x=year, y=x_fil), colour="red")
res <- do_fitting(y, 0, 10, opt_res$par)
year=start(y)[1]:end(y)[1]
ggplot()+
geom_line(data=res[[1]],aes(x=year, y=y))+
geom_line(data=res[[1]],aes(x=year, y=x_fil), colour="red")+
geom_ribbon(  data=res[[1]]
, aes( x    = year
,ymin = x_fil-1.97*sqrt(Vxpre_fil)
,ymax = x_fil+1.97*sqrt(Vxpre_fil))
,alpha=0.2)
# 最適化
opt_res <-
optim(  function(Vwv){do_fitting(y, 0, 10, Vwv)[["obj_value"]]}
, par=c(1000,1000)
, method = "L-BFGS-B"
, lower=c(1,1)
)
res <- do_fitting(y, 0, 10, opt_res$par)
year=start(y)[1]:end(y)[1]
ggplot()+
geom_line(data=res[[1]],aes(x=year, y=y))+
geom_line(data=res[[1]],aes(x=year, y=x_fil), colour="red")+
geom_ribbon(  data=res[[1]]
, aes( x    = year
,ymin = x_fil-1.97*sqrt(Vxpre_fil)
,ymax = x_fil+1.97*sqrt(Vxpre_fil))
,alpha=0.2)
# 最適化
opt_res <-
optim(  function(Vwv){do_fitting(y, 0, 1, Vwv)[["obj_value"]]}
, par=c(1000,1000)
, method = "L-BFGS-B"
, lower=c(1,1)
)
res <- do_fitting(y, 0, 1, opt_res$par)
opt_res <-
optim(  function(Vwv){do_fitting(y, 0, 1, Vwv)[["obj_value"]]}
, par=c(1000,1000)
, method = "L-BFGS-B"
, lower=c(1,1)
)
res <- do_fitting(y, 0, 1, opt_res$par)
year=start(y)[1]:end(y)[1]
ggplot()+
geom_line(data=res[[1]],aes(x=year, y=y))+
geom_line(data=res[[1]],aes(x=year, y=x_fil), colour="red")+
geom_ribbon(  data=res[[1]]
, aes( x    = year
,ymin = x_fil-1.97*sqrt(Vxpre_fil)
,ymax = x_fil+1.97*sqrt(Vxpre_fil))
,alpha=0.2)
# 最適化
opt_res <-
optim(  function(Vwv){do_fitting(y, 0, 1, Vwv)[["obj_value"]]}
, par=c(100,100)
, method = "L-BFGS-B"
, lower=c(1,1)
)
res <- do_fitting(y, 0, 1, opt_res$par)
year=start(y)[1]:end(y)[1]
ggplot()+
geom_line(data=res[[1]],aes(x=year, y=y))+
geom_line(data=res[[1]],aes(x=year, y=x_fil), colour="red")+
geom_ribbon(  data=res[[1]]
, aes( x    = year
,ymin = x_fil-1.97*sqrt(Vxpre_fil)
,ymax = x_fil+1.97*sqrt(Vxpre_fil))
,alpha=0.2)
# 最適化
opt_res <-
optim(  function(Vwv){do_fitting(y, 0, 1, Vwv)[["obj_value"]]}
, par=c(10,10)
, method = "L-BFGS-B"
, lower=c(1,1)
)
res <- do_fitting(y, 0, 1, opt_res$par)
year=start(y)[1]:end(y)[1]
ggplot()+
geom_line(data=res[[1]],aes(x=year, y=y))+
geom_line(data=res[[1]],aes(x=year, y=x_fil), colour="red")+
geom_ribbon(  data=res[[1]]
, aes( x    = year
,ymin = x_fil-1.97*sqrt(Vxpre_fil)
,ymax = x_fil+1.97*sqrt(Vxpre_fil))
,alpha=0.2)
# 最適化
opt_res <-
optim(  function(Vwv){do_fitting(y, 0, 1, Vwv)[["obj_value"]]}
, par=c(10,10)
, method = "L-BFGS-B"
, lower=c(1,1)
)
res <- do_fitting(y, 0, 1, opt_res$par)
year=start(y)[1]:end(y)[1]
ggplot()+
geom_line(data=res[[1]],aes(x=year, y=y))+
geom_line(data=res[[1]],aes(x=year, y=x_fil), colour="red")+
geom_ribbon(  data=res[[1]]
, aes( x    = year
,ymin = x_fil-1.97*sqrt(Vxpre_fil)
,ymax = x_fil+1.97*sqrt(Vxpre_fil))
,alpha=0.2)
ggplot()+
geom_line(data=res[[1]],aes(x=year, y=y))+
geom_line(data=res[[1]],aes(x=year, y=x_fil), colour="red")
res
res$obj_value
res[[1]]
res[[1]]$y_pred
res[[1]]$y
res[[1]]$y-res[[1]]$y_pred
plot(res[[1]]$y-res[[1]]$y_pred)
plot(res[[1]]$y-res[[1]]$y_pred, type="l")
plot(res[[1]]$y[3:-res[[1]]$y_pred, type="l")
plot(res[[1]]$y[3:]-res[[1]]$y_pred[3:], type="l")
plot(res[[1]]$y[3`50:]-res[[1]]$y_pred[3:150], type="l")
plot(res[[1]]$y[3150:]-res[[1]]$y_pred[3:150], type="l")
plot(res[[1]]$y[3:150]-res[[1]]$y_pred[3:150], type="l")
acf(, margin, ...)(res[[1]]$y[3:150]-res[[1]]$y_pred[3:150])
acf((res[[1]]$y[3:150]-res[[1]]$y_pred[3:150])
)
acf((res[[1]]$y[2:150]-res[[1]]$y_pred[2:150])
)
y
lm(y)
y
lm(formula = y~1,data = as_tibble(y))
coef(lm(formula = y~1,data = as_tibble(y)))
b=coef(lm(formula = y~1,data = as_tibble(y)))
b
y-b
acf(y-b)
plot(y-b, type="l")
plot(res[[1]]$y[3:150]-res[[1]]$y_pred[3:150], type="l")
plot(res[[1]]$y[3:150]-res[[1]]$y_pred[3:150], type="l")
plot(res[[1]]$y[5:150]-res[[1]]$y_pred[5:150], type="l")
plot(y-b, type="l")
plot((y-b[3:150]), type="l")
plot((y-b)[3:150], type="l")
plot(res[[1]]$y[5:150]-res[[1]]$y_pred[5:150], type="l")
path <- "~/R/コロナ/nikkei-225-index-historical-chart-data.csv"
library(tidyverse)
library(KFAS)
library(forecast)
library(ggplot2)
library(lubridate)
library(DT)
target_col  <- as.name( "value")
yyyymmdd    <-  as.name("date")
corona_start <- "2020-02-20"
path <- "./index-historical-chart-data.csv"
#https://www.macrotrends.net/2593/nikkei-225-index-historical-chart-data
df <- read_csv(path, skip=13) %>%
filter(!!yyyymmdd >="2019-11-01")
#https://www.macrotrends.net/2593/nikkei-225-index-historical-chart-data
df <- read_csv(path, skip=13) %>%
filter(!!yyyymmdd >="2019-11-01")
getwd()
setwd("~/git_website/state_space_model")
getwd()
library(tidyverse)
library(KFAS)
library(forecast)
library(ggplot2)
library(lubridate)
library(DT)
target_col  <- as.name( "value")
yyyymmdd    <-  as.name("date")
corona_start <- "2020-02-20"
path <- "./index-historical-chart-data.csv"
#https://www.macrotrends.net/2593/nikkei-225-index-historical-chart-data
df <- read_csv(path, skip=13) %>%
filter(!!yyyymmdd >="2019-11-01")
path <- "~/git_website/state_space_model/index-historical-chart-data.csv"
#https://www.macrotrends.net/2593/nikkei-225-index-historical-chart-data
df <- read_csv(path, skip=13) %>%
filter(!!yyyymmdd >="2019-11-01")
read_csv(path, skip=13)
random walkのデータを2系列作成
```{r , message=F}
set.seed(42)#生命、宇宙、そして万物についての究極の疑問の答え
rw1 <- rnorm(1000) %>% cumsum
rw2 <- rnorm(1000) %>% cumsum
df <- tibble(rw1, rw2)
```
set.seed(42)#生命、宇宙、そして万物についての究極の疑問の答え
rw1 <- rnorm(1000) %>% cumsum
library(tidyverse)
# 時系列分析と状態空間モデルの基礎：RとStanで学ぶ理論と実装
# 第5部 10章
# 応用：広告の効果はどれだけ持続するか
# この章で使うパッケージ --------------------
install.packages("KFAS")
install.packages("forecast")
install.packages("ggfortify")
library(KFAS)
library(forecast)
library(ggplot2)
library(ggfortify)
# シミュレーションデータの作成 --------------------
# シミュレーションにおけるサンプルサイズ
n_sample <- 450
# 乱数の種
set.seed(10)
# 時間によって変化する広告の効果
true_reg_coef <- -log(1:50)*2 + 8
# ランダムウォークする水準値
mu <- cumsum(rnorm(n = n_sample, sd = 0.5)) + 15
# 水準値＋広告効果として状態を作る
x <- mu + c(rep(0, 200), true_reg_coef, rep(0, 200))
# 観測誤差を作る
obs_error <- rnorm(n = n_sample, sd=2)
# 広告効果が入った売り上げデータ
sales_ad <- x + obs_error
# 説明変数としての広告フラグ(1なら広告有り)
ad_flg <- numeric(n_sample)
ad_flg[201:250] <- 1
# シミュレーションデータの図示
ggtsdisplay(ts(sales_ad), main = "シミュレーションデータ")
# KFASによる時変係数モデル --------------------
# Step1：モデルの構造を決める
build_reg <- SSModel(
H = NA,
sales_ad ~
SSMtrend(degree = 1, Q = NA) +
SSMregression( ~ ad_flg , Q = NA)
)
# Step2 パラメタ推定
fit_reg <- fitSSM(build_reg, inits = c(1, 1, 1))
# Step3、4：フィルタリング・スムージング
result_reg <- KFS(
fit_reg$model,
filtering = c("state", "mean"),
smoothing = c("state", "mean")
)
# 変化する広告効果の図示 --------------------
# 信頼区間付きの回帰係数
interval_coef <- predict(fit_reg$model, states = "regression",
interval = "confidence", level = 0.95)
# データの整形
coef_df <- cbind(
data.frame(time = 201:250, reg_coef = true_reg_coef),
as.data.frame(interval_coef[201:250, ])
)
# 図示
ggplot(data = coef_df, aes(x = time, y = reg_coef)) +
labs(title="広告の効果の変化") +
geom_point(alpha = 0.6, size = 0.9) +
geom_line(aes(y = fit), size = 1.2) +
geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.3)
# シミュレーションデータの作成 --------------------
# シミュレーションにおけるサンプルサイズ
n_sample <- 450
# 乱数の種
set.seed(10)
# 時間によって変化する広告の効果
true_reg_coef <- -log(1:50)*2 + 8
# ランダムウォークする水準値
mu <- cumsum(rnorm(n = n_sample, sd = 0.5)) + 15
# 水準値＋広告効果として状態を作る
x <- mu + c(rep(0, 200), true_reg_coef, rep(0, 200))
# 観測誤差を作る
obs_error <- rnorm(n = n_sample, sd=2)
# 広告効果が入った売り上げデータ
sales_ad <- x + obs_error
# 説明変数としての広告フラグ(1なら広告有り)
ad_flg <- numeric(n_sample)
ad_flg[201:250] <- 1
# シミュレーションデータの図示
ggtsdisplay(ts(sales_ad), main = "シミュレーションデータ")
# KFASによる時変係数モデル --------------------
# Step1：モデルの構造を決める
build_reg <- SSModel(
H = NA,
sales_ad ~
SSMtrend(degree = 1, Q = NA) +
SSMregression( ~ ad_flg , Q = NA)
)
# Step2 パラメタ推定
fit_reg <- fitSSM(build_reg, inits = c(1, 1, 1))
# Step3、4：フィルタリング・スムージング
result_reg <- KFS(
fit_reg$model,
filtering = c("state", "mean"),
smoothing = c("state", "mean")
)
# 変化する広告効果の図示 --------------------
# 信頼区間付きの回帰係数
interval_coef <- predict(fit_reg$model, states = "regression",
interval = "confidence", level = 0.95)
# データの整形
coef_df <- cbind(
data.frame(time = 201:250, reg_coef = true_reg_coef),
as.data.frame(interval_coef[201:250, ])
)
# 図示
ggplot(data = coef_df, aes(x = time, y = reg_coef)) +
labs(title="広告の効果の変化") +
geom_point(alpha = 0.6, size = 0.9) +
geom_line(aes(y = fit), size = 1.2) +
geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.3)
# シミュレーションデータの図示
ggtsdisplay(ts(sales_ad), main = "シミュレーションデータ")
# Step1：モデルの構造を決める
build_reg <- SSModel(
H = NA,
sales_ad ~
SSMtrend(degree = 1, Q = NA) +
SSMregression( ~ ad_flg , Q = NA)
)
# Step2 パラメタ推定
fit_reg <- fitSSM(build_reg, inits = c(1, 1, 1))
# Step3、4：フィルタリング・スムージング
result_reg <- KFS(
fit_reg$model,
filtering = c("state", "mean"),
smoothing = c("state", "mean")
)
# 信頼区間付きの回帰係数
interval_coef <- predict(fit_reg$model, states = "regression",
interval = "confidence", level = 0.95)
# データの整形
coef_df <- cbind(
data.frame(time = 201:250, reg_coef = true_reg_coef),
as.data.frame(interval_coef[201:250, ])
)
# 図示
ggplot(data = coef_df, aes(x = time, y = reg_coef)) +
labs(title="広告の効果の変化") +
geom_point(alpha = 0.6, size = 0.9) +
geom_line(aes(y = fit), size = 1.2) +
geom_ribbon(aes(ymin = lwr, ymax = upr), alpha = 0.3)
-log(1:50)*2
x
tibble(death_cnt=1:4, teams=c(109, 65, 22, 3, 1))
tibble(death_cnt=1:4, teams=c(109, 65, 22, 3, 1))
df <- tibble(death_cnt=0:4, teams=c(109, 65, 22, 3, 1))
df
df %>% ggplot()+geom_bar(mapping = aes(x=death_cnt, y=teams))
df %>% ggplot()+geom_bar(mapping = aes(x=death_cnt, y=teams)stat = "identity")
df %>% ggplot()+geom_bar(mapping = aes(x=death_cnt, y=teams),stat = "identity")
lmd <- df$death_cnt*df$teams %>% sum
lmd
df$death_cnt*df$teams
lmd <- sum(df$death_cnt*df$teams)
lmd
lmd <- avg(df$death_cnt*df$teams)
lmd <- mean(df$death_cnt*df$teams)
lmd
lmd <- sum(df$death_cnt*df$teams)/sum(df$teams)
lmd
dpois(10,lmd)
dpois(0,lmd)
dpois(0,lmd)
dpois(0,lmd)
df %>% ggplot()+geom_bar(mapping = aes(x=death_cnt, y=teams/sum(teams)),stat = "identity")
dpois(c(1,2),lmd)
dpois(0:4,lmd)
df <- tibble(death_cnt=0:4, teams=c(109, 65, 22, 3, 1))
lmd <- sum(df$death_cnt*df$teams)/sum(df$teams)
mdl <- dpois(0:4,lmd)
df <- df %>% mutate(mdl = dpois(0:4,lmd))
df
df <- tibble(death_cnt=0:4, teams=c(109, 65, 22, 3, 1)) %>%
mutate(nomarl = teams/sum(teams))
df
df <- df %>% mutate(mdl = dpois(0:4,lmd))
df
geom_bar(mapping = aes(x=death_cnt, y=nomarl),stat = "identity")+
df %>% ggplot()+
df %>% ggplot()+
geom_bar(mapping = aes(x=death_cnt, y=nomarl),stat = "identity")+
geom_line(mapping = aes(x=death_cnt, y=lmd))
lmd <- sum(df$death_cnt*df$teams)/sum(df$teams)
lmd
df <- df %>% mutate(mdl = dpois(0:4,lmd))
df %>% ggplot()+
geom_bar(mapping = aes(x=death_cnt, y=nomarl),stat = "identity")+
geom_line(mapping = aes(x=death_cnt, y=mdl))
df %>% ggplot()+
geom_line(mapping = aes(x=death_cnt, y=nomarl))+
geom_line(mapping = aes(x=death_cnt, y=mdl))
df %>% ggplot()+
geom_line(mapping = aes(x=death_cnt, y=nomarl))+
geom_line(mapping = aes(x=death_cnt, y=mdl), colour="red")
df <- tibble(death_cnt=0:7, teams=c(74, 98, 90, 61, 21, 13, 7,1)) %>%
mutate(nomarl = teams/sum(teams))
lmd <- sum(df$death_cnt*df$teams)/sum(df$teams)
df <- df %>% mutate(mdl = dpois(0:4,lmd))
lmd <- sum(df$death_cnt*df$teams)/sum(df$teams)
df <- df %>% mutate(mdl = dpois(0:4,lmd))
df <- df %>% mutate(mdl = dpois(0:8,lmd))
df <- df %>% mutate(mdl = dpois(0:7,lmd))
df %>% ggplot()+
geom_line(mapping = aes(x=death_cnt, y=nomarl))+
geom_line(mapping = aes(x=death_cnt, y=mdl), colour="red")
